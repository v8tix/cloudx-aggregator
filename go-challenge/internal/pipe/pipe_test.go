package pipe

import (
	"bytes"
	"github.com/reactivex/rxgo/v2"
	"testing"
)

var (
	raw = func() []uint8 {
		return []uint8{0x5b, 0x7b, 0x22, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x22, 0x61, 0x31, 0x33, 0x39, 0x63, 0x38, 0x61, 0x30, 0x2d, 0x65, 0x38, 0x62, 0x32, 0x2d, 0x34, 0x39, 0x64, 0x30, 0x2d, 0x62, 0x33, 0x65, 0x64, 0x2d, 0x65, 0x30, 0x33, 0x63, 0x63, 0x65, 0x65, 0x38, 0x62, 0x31, 0x34, 0x66, 0x22, 0x2c, 0x22, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x3a, 0x22, 0x33, 0x31, 0x61, 0x35, 0x31, 0x31, 0x62, 0x36, 0x2d, 0x33, 0x66, 0x32, 0x63, 0x2d, 0x34, 0x65, 0x61, 0x64, 0x2d, 0x62, 0x37, 0x61, 0x36, 0x2d, 0x34, 0x61, 0x66, 0x66, 0x31, 0x63, 0x63, 0x33, 0x65, 0x39, 0x39, 0x39, 0x22, 0x7d, 0x2c, 0x7b, 0x22, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x22, 0x36, 0x61, 0x35, 0x34, 0x31, 0x30, 0x32, 0x39, 0x2d, 0x37, 0x63, 0x37, 0x39, 0x2d, 0x34, 0x34, 0x32, 0x37, 0x2d, 0x62, 0x35, 0x66, 0x65, 0x2d, 0x61, 0x64, 0x65, 0x37, 0x33, 0x64, 0x38, 0x35, 0x62, 0x62, 0x34, 0x62, 0x22, 0x2c, 0x22, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x3a, 0x22, 0x30, 0x31, 0x33, 0x36, 0x37, 0x34, 0x66, 0x61, 0x2d, 0x31, 0x34, 0x36, 0x30, 0x2d, 0x34, 0x36, 0x65, 0x62, 0x2d, 0x62, 0x65, 0x66, 0x30, 0x2d, 0x31, 0x31, 0x62, 0x33, 0x62, 0x35, 0x35, 0x61, 0x37, 0x63, 0x65, 0x38, 0x22, 0x7d, 0x2c, 0x7b, 0x22, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x22, 0x34, 0x66, 0x35, 0x38, 0x38, 0x32, 0x32, 0x36, 0x2d, 0x34, 0x39, 0x39, 0x64, 0x2d, 0x34, 0x35, 0x30, 0x34, 0x2d, 0x39, 0x31, 0x39, 0x32, 0x2d, 0x64, 0x61, 0x34, 0x61, 0x31, 0x38, 0x65, 0x33, 0x66, 0x30, 0x35, 0x62, 0x22, 0x2c, 0x22, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x3a, 0x22, 0x38, 0x64, 0x33, 0x30, 0x30, 0x65, 0x37, 0x65, 0x2d, 0x35, 0x35, 0x61, 0x37, 0x2d, 0x34, 0x62, 0x63, 0x66, 0x2d, 0x62, 0x63, 0x30, 0x36, 0x2d, 0x38, 0x61, 0x33, 0x65, 0x38, 0x32, 0x66, 0x39, 0x33, 0x33, 0x38, 0x31, 0x22, 0x7d, 0x2c, 0x7b, 0x22, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x22, 0x63, 0x36, 0x38, 0x31, 0x65, 0x65, 0x65, 0x33, 0x2d, 0x66, 0x64, 0x37, 0x64, 0x2d, 0x34, 0x65, 0x30, 0x36, 0x2d, 0x61, 0x66, 0x66, 0x36, 0x2d, 0x31, 0x33, 0x64, 0x66, 0x64, 0x34, 0x38, 0x64, 0x63, 0x65, 0x31, 0x30, 0x22, 0x2c, 0x22, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x3a, 0x22, 0x34, 0x33, 0x35, 0x30, 0x39, 0x37, 0x31, 0x37, 0x2d, 0x36, 0x34, 0x35, 0x36, 0x2d, 0x34, 0x66, 0x34, 0x32, 0x2d, 0x38, 0x35, 0x33, 0x39, 0x2d, 0x61, 0x61, 0x38, 0x31, 0x66, 0x63, 0x64, 0x35, 0x63, 0x32, 0x35, 0x37, 0x22, 0x7d, 0x2c, 0x7b, 0x22, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x22, 0x64, 0x37, 0x66, 0x30, 0x63, 0x63, 0x63, 0x33, 0x2d, 0x34, 0x37, 0x37, 0x65, 0x2d, 0x34, 0x33, 0x61, 0x38, 0x2d, 0x61, 0x64, 0x63, 0x63, 0x2d, 0x38, 0x61, 0x62, 0x37, 0x31, 0x31, 0x66, 0x39, 0x30, 0x64, 0x33, 0x30, 0x22, 0x2c, 0x22, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x3a, 0x22, 0x64, 0x37, 0x34, 0x31, 0x36, 0x37, 0x30, 0x34, 0x2d, 0x64, 0x33, 0x39, 0x34, 0x2d, 0x34, 0x39, 0x38, 0x32, 0x2d, 0x39, 0x38, 0x36, 0x33, 0x2d, 0x33, 0x65, 0x31, 0x36, 0x34, 0x61, 0x30, 0x64, 0x64, 0x61, 0x33, 0x66, 0x22, 0x7d, 0x5d}
	}()
	association = func() []uint8 {
		return []uint8{0x5b, 0x7b, 0x22, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x22, 0x30, 0x34, 0x37, 0x33, 0x34, 0x30, 0x62, 0x33, 0x2d, 0x30, 0x36, 0x32, 0x36, 0x2d, 0x34, 0x38, 0x62, 0x64, 0x2d, 0x38, 0x36, 0x62, 0x36, 0x2d, 0x62, 0x61, 0x39, 0x31, 0x32, 0x61, 0x63, 0x64, 0x35, 0x64, 0x35, 0x38, 0x22, 0x2c, 0x22, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x3a, 0x22, 0x30, 0x34, 0x65, 0x65, 0x31, 0x39, 0x38, 0x36, 0x2d, 0x36, 0x32, 0x64, 0x36, 0x2d, 0x34, 0x39, 0x31, 0x33, 0x2d, 0x62, 0x66, 0x36, 0x64, 0x2d, 0x37, 0x64, 0x39, 0x31, 0x61, 0x62, 0x31, 0x39, 0x30, 0x32, 0x64, 0x35, 0x22, 0x7d, 0x2c, 0x7b, 0x22, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x22, 0x39, 0x63, 0x38, 0x34, 0x32, 0x65, 0x30, 0x31, 0x2d, 0x63, 0x39, 0x34, 0x37, 0x2d, 0x34, 0x31, 0x30, 0x65, 0x2d, 0x39, 0x37, 0x62, 0x61, 0x2d, 0x62, 0x32, 0x35, 0x33, 0x31, 0x62, 0x39, 0x62, 0x32, 0x62, 0x63, 0x38, 0x22, 0x2c, 0x22, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x3a, 0x22, 0x36, 0x37, 0x61, 0x62, 0x35, 0x37, 0x30, 0x65, 0x2d, 0x63, 0x36, 0x31, 0x34, 0x2d, 0x34, 0x36, 0x35, 0x38, 0x2d, 0x61, 0x63, 0x32, 0x62, 0x2d, 0x32, 0x31, 0x34, 0x39, 0x33, 0x38, 0x61, 0x33, 0x32, 0x33, 0x64, 0x64, 0x22, 0x7d, 0x2c, 0x7b, 0x22, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x22, 0x39, 0x38, 0x31, 0x31, 0x36, 0x38, 0x61, 0x37, 0x2d, 0x37, 0x36, 0x32, 0x32, 0x2d, 0x34, 0x31, 0x31, 0x61, 0x2d, 0x38, 0x62, 0x30, 0x33, 0x2d, 0x39, 0x65, 0x65, 0x65, 0x31, 0x32, 0x37, 0x63, 0x62, 0x38, 0x33, 0x64, 0x22, 0x2c, 0x22, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x3a, 0x22, 0x30, 0x65, 0x38, 0x34, 0x31, 0x31, 0x63, 0x31, 0x2d, 0x35, 0x32, 0x38, 0x38, 0x2d, 0x34, 0x38, 0x37, 0x61, 0x2d, 0x61, 0x37, 0x30, 0x66, 0x2d, 0x38, 0x61, 0x31, 0x34, 0x31, 0x31, 0x34, 0x65, 0x33, 0x39, 0x65, 0x66, 0x22, 0x7d, 0x5d}
	}()
)

func TestObservableWithByteArrayProducerReturnsByteArray(t *testing.T) {
	t.Parallel()

	cases := map[string]struct {
		input []uint8
		want  []uint8
	}{
		"with byte array": {
			input: raw,
			want:  raw,
		},
	}

	for description, tc := range cases {
		t.Run(description, func(t *testing.T) {
			ch := make(chan rxgo.Item)
			go func() {
				ch <- rxgo.Of(tc.input)
				close(ch)
			}()

			observable := rxgo.FromChannel(ch)
			for item := range observable.Observe() {
				got := item.V.([]uint8)
				if !bytes.Equal(got, tc.want) {
					t.Fatalf("Expected: %v, Got: %v", tc.want, got)
				}
			}
		})
	}
}
